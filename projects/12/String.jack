// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array chars; 
    field int currLength, allocLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (~(maxLength = 0)) {
            let chars = Array.new(maxLength);
        }
        let allocLength = maxLength;
        let currLength = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (allocLength > 0) {
            do chars.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let chars[currLength] = c;
        let currLength = currLength + 1;

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (~(currLength = 0)) {
            let currLength = currLength - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, sign, i, d;
        let value = 0;
        let sign = 1;
        let i = 0;

        // 45 --> '-'
        if (chars[0] = 45) {
            let sign = -1;
            let i = 1;
        }

        // 48 --> '0' | 57 --> '9'
        while (i < currLength) {
            let d = chars[i] - 48;
            if ((d < 0) | (d > 9)) {
                return sign * value;
            }

            let value = value * 10 + d;
            let i = i + 1;
        }

        return sign * value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let currLength = 0;

        do appendInt(val);
        return;
    }

    method void appendInt(int val) {
        var int c;

        if (val < 0) {
            let val = -val;
            do appendChar(45); // append -
        }

        let c = val - (val / 10 * 10) + 48;

        if (~(val < 10)) {
            do appendInt(val / 10);
        } 

        do appendChar(c);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
