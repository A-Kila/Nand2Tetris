// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen, bits;
    static int SCREEN_SIZE;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let SCREEN_SIZE = 24576 - screen;
        let color = true;

        let bits = Array.new(16);
        let bits[0] = 1;
        let bits[1] = 2;
        let bits[2] = 4;
        let bits[3] = 8;
        let bits[4] = 16;
        let bits[5] = 32;
        let bits[6] = 64;
        let bits[7] = 128;
        let bits[8] = 256;
        let bits[9] = 512;
        let bits[10] = 1024;
        let bits[11] = 2048;
        let bits[12] = 4096;
        let bits[13] = 8192;
        let bits[14] = 16384;
        let bits[15] = 16384 + 16384;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;
        while (i < SCREEN_SIZE) {
            let screen[i] = 0;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, bit;
        
        let address = Screen.getScreenAddress(x, y);

        if (color) {
            let screen[address] = screen[address] | bits[x & 15];
        } else {
            let screen[address] = screen[address] & ~bits[x & 15];
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if (y1 = y2) {
            do Screen.drawHoriLine(x1, x2, y1);
            return;
        }

        if (x1 = x2) {
            do Screen.drawVertLine(x1, y1, y2);
            return;
        }

        do Screen.drawDefaultLine(x1, x2, y1, y2);
        return;
    }

    function void drawHoriLine(int x1, int x2, int y) {
        var int x, sign;
        let x = x1;
        let sign = 1;

        if (x2 < x1) { let sign = -1; }

        while (~(x = x2)) {
            do Screen.drawPixel(x, y);
            let x = x + sign;
        }
        do Screen.drawPixel(x2, y);

        return;
    }

    function void drawVertLine(int x, int y1, int y2) {
        var int y, sign;
        let y = y1;
        let sign = 1;

        if (y2 < y1) { let sign = -1; }

        while (~(y = y2)) {
            do Screen.drawPixel(x, y);
            let y = y + sign;
        }
        do Screen.drawPixel(x, y2);

        return;
    }

    function void drawDefaultLine(int x1, int x2, int y1, int y2) {
        var int x, y, dx, dy, diff, signX, signY;

        let x = x1;
        let y = y1;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let diff = 0;
        let signX = 1;
        let signY = 1;

        if (dx < 0) { let signX = -1; let dx = -dx; }
        if (dy < 0) { let signY = -1; let dy = -dy; }

        while (~(x = x2) & ~(y = y2)) {
            do Screen.drawPixel(x, y);

            if (diff < 0) {
                let x = x + signX;
                let diff = diff + dy;
            } else {
                let y = y + signY;
                let diff = diff - dx;
            }
        }
        do Screen.drawPixel(x, y);

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy, sign;
        let dy = y1;
        let sign = 1;
        if (y2 < y1) { let sign = -1; }

        while (~(dy = (y2 + 1))) {
            do Screen.drawLine(x1, dy, x2, dy);
            let dy = dy + sign;
        }
        
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, xDiff;
        let dy = -r;

        while (~(dy = (r + 1))) {
            let xDiff = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - xDiff, y + dy, x + xDiff, y + dy);
            let dy = dy + 1;
        }

        return;
    }

    function int getScreenAddress(int x, int y) {
        return (y * 32) + (x / 16);
    }
}
